digraph G {
	node_0[label = "program"];
	node_1[label = "external_expression"];
	node_2[label = "function_definition"];
	node_3[label = "Return_Type: int"];
	node_4[label = "Func_Name: main"];
	node_5[label = "parameter_list"];
	node_6[label = "compound_statement"];
	node_7[label = "declaration_list"];
	node_8[label = "declaration"];
	node_9[label = "type_specifier int"];
	node_10[label = "init_declarator_list"];
	node_11[label = "init_declarator"];
	node_12[label = "declarator"];
	node_13[label = "direct_declarator"];
	node_14[label = "INDENTIFIER: a"];
	node_15[label = "initializer"];
	node_16[label = "expression conditional"];
	node_17[label = "conditional_expression"];
	node_18[label = "binary_expression op:"];
	node_19[label = "cast_expression"];
	node_20[label = "unary_expression "];
	node_21[label = "postfix_expression"];
	node_22[label = "primary_expression"];
	node_23[label = "CONSTANT: 1"];
	node_24[label = "declaration"];
	node_25[label = "type_specifier int"];
	node_26[label = "init_declarator_list"];
	node_27[label = "init_declarator"];
	node_28[label = "declarator"];
	node_29[label = "direct_declarator"];
	node_30[label = "INDENTIFIER: b"];
	node_31[label = "initializer"];
	node_32[label = "expression conditional"];
	node_33[label = "conditional_expression"];
	node_34[label = "binary_expression op:"];
	node_35[label = "cast_expression"];
	node_36[label = "unary_expression "];
	node_37[label = "postfix_expression"];
	node_38[label = "primary_expression"];
	node_39[label = "CONSTANT: 2"];
	node_40[label = "declaration"];
	node_41[label = "type_specifier int"];
	node_42[label = "init_declarator_list"];
	node_43[label = "init_declarator"];
	node_44[label = "declarator"];
	node_45[label = "direct_declarator"];
	node_46[label = "INDENTIFIER: c"];
	node_47[label = "initializer"];
	node_48[label = "expression conditional"];
	node_49[label = "conditional_expression"];
	node_50[label = "binary_expression op:"];
	node_51[label = "cast_expression"];
	node_52[label = "unary_expression "];
	node_53[label = "postfix_expression"];
	node_54[label = "primary_expression"];
	node_55[label = "CONSTANT: 4"];
	node_56[label = "statement_list"];
	node_57[label = "statement"];
	node_58[label = "selection_statement"];
	node_59[label = "expression conditional"];
	node_60[label = "conditional_expression"];
	node_61[label = "binary_expression op:=="];
	node_62[label = "binary_expression op:"];
	node_63[label = "cast_expression"];
	node_64[label = "unary_expression "];
	node_65[label = "postfix_expression"];
	node_66[label = "primary_expression"];
	node_67[label = "INDENTIFIER: c"];
	node_68[label = "binary_expression op:"];
	node_69[label = "cast_expression"];
	node_70[label = "unary_expression "];
	node_71[label = "postfix_expression"];
	node_72[label = "primary_expression"];
	node_73[label = "INDENTIFIER: c"];
	node_74[label = "statement"];
	node_75[label = "compound_statement"];
	node_76[label = "statement_list"];
	node_77[label = "statement"];
	node_78[label = "expression_statement"];
	node_79[label = "expression assignment_expr"];
	node_80[label = "unary_expression "];
	node_81[label = "postfix_expression"];
	node_82[label = "primary_expression"];
	node_83[label = "INDENTIFIER: c"];
	node_84[label = "assignment_operator ="];
	node_85[label = "expression conditional"];
	node_86[label = "conditional_expression"];
	node_87[label = "binary_expression op:"];
	node_88[label = "cast_expression"];
	node_89[label = "unary_expression "];
	node_90[label = "postfix_expression"];
	node_91[label = "primary_expression"];
	node_92[label = "CONSTANT: 1"];
	node_93[label = "statement"];
	node_94[label = "compound_statement"];
	node_95[label = "statement_list"];
	node_96[label = "statement"];
	node_97[label = "expression_statement"];
	node_98[label = "expression assignment_expr"];
	node_99[label = "unary_expression "];
	node_100[label = "postfix_expression"];
	node_101[label = "primary_expression"];
	node_102[label = "INDENTIFIER: c"];
	node_103[label = "assignment_operator ="];
	node_104[label = "expression conditional"];
	node_105[label = "conditional_expression"];
	node_106[label = "binary_expression op:"];
	node_107[label = "cast_expression"];
	node_108[label = "unary_expression "];
	node_109[label = "postfix_expression"];
	node_110[label = "primary_expression"];
	node_111[label = "CONSTANT: 2"];
	node_112[label = "statement"];
	node_113[label = "jump_statement	return"];
	node_114[label = "expression conditional"];
	node_115[label = "conditional_expression"];
	node_116[label = "binary_expression op:"];
	node_117[label = "cast_expression"];
	node_118[label = "unary_expression "];
	node_119[label = "postfix_expression"];
	node_120[label = "primary_expression"];
	node_121[label = "CONSTANT: 0"];

	node_2 -> node_3;
	node_2 -> node_4;
	node_2 -> node_5;
	node_8 -> node_9;
	node_13 -> node_14;
	node_12 -> node_13;
	node_11 -> node_12;
	node_22 -> node_23;
	node_21 -> node_22;
	node_20 -> node_21;
	node_19 -> node_20;
	node_18 -> node_19;
	node_17 -> node_18;
	node_16 -> node_17;
	node_15 -> node_16;
	node_11 -> node_15;
	node_10 -> node_11;
	node_8 -> node_10;
	node_7 -> node_8;
	node_24 -> node_25;
	node_29 -> node_30;
	node_28 -> node_29;
	node_27 -> node_28;
	node_38 -> node_39;
	node_37 -> node_38;
	node_36 -> node_37;
	node_35 -> node_36;
	node_34 -> node_35;
	node_33 -> node_34;
	node_32 -> node_33;
	node_31 -> node_32;
	node_27 -> node_31;
	node_26 -> node_27;
	node_24 -> node_26;
	node_7 -> node_24;
	node_40 -> node_41;
	node_45 -> node_46;
	node_44 -> node_45;
	node_43 -> node_44;
	node_54 -> node_55;
	node_53 -> node_54;
	node_52 -> node_53;
	node_51 -> node_52;
	node_50 -> node_51;
	node_49 -> node_50;
	node_48 -> node_49;
	node_47 -> node_48;
	node_43 -> node_47;
	node_42 -> node_43;
	node_40 -> node_42;
	node_7 -> node_40;
	node_6 -> node_7;
	node_66 -> node_67;
	node_65 -> node_66;
	node_64 -> node_65;
	node_63 -> node_64;
	node_62 -> node_63;
	node_61 -> node_62;
	node_72 -> node_73;
	node_71 -> node_72;
	node_70 -> node_71;
	node_69 -> node_70;
	node_68 -> node_69;
	node_61 -> node_68;
	node_60 -> node_61;
	node_59 -> node_60;
	node_58 -> node_59;
	node_82 -> node_83;
	node_81 -> node_82;
	node_80 -> node_81;
	node_79 -> node_80;
	node_79 -> node_84;
	node_91 -> node_92;
	node_90 -> node_91;
	node_89 -> node_90;
	node_88 -> node_89;
	node_87 -> node_88;
	node_86 -> node_87;
	node_85 -> node_86;
	node_79 -> node_85;
	node_78 -> node_79;
	node_77 -> node_78;
	node_76 -> node_77;
	node_75 -> node_76;
	node_74 -> node_75;
	node_58 -> node_74;
	node_101 -> node_102;
	node_100 -> node_101;
	node_99 -> node_100;
	node_98 -> node_99;
	node_98 -> node_103;
	node_110 -> node_111;
	node_109 -> node_110;
	node_108 -> node_109;
	node_107 -> node_108;
	node_106 -> node_107;
	node_105 -> node_106;
	node_104 -> node_105;
	node_98 -> node_104;
	node_97 -> node_98;
	node_96 -> node_97;
	node_95 -> node_96;
	node_94 -> node_95;
	node_93 -> node_94;
	node_58 -> node_93;
	node_57 -> node_58;
	node_56 -> node_57;
	node_120 -> node_121;
	node_119 -> node_120;
	node_118 -> node_119;
	node_117 -> node_118;
	node_116 -> node_117;
	node_115 -> node_116;
	node_114 -> node_115;
	node_113 -> node_114;
	node_112 -> node_113;
	node_56 -> node_112;
	node_6 -> node_56;
	node_2 -> node_6;
	node_1 -> node_2;
	node_0 -> node_1;
}